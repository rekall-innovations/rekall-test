DEFAULT:
  --cache_dir: '%(testdir)s/../profile_cache/'
  --filename:  '%(testdir)s/tigger.vmem.E01'
  --name_resolution_strategies:
     - Module
     - Symbol
  pids: 1724
  --cache: memory

disabled:
  - TestEntityFind
  - TestIPNetstat
  - TestListZones
  - TestListEvents
  - TestDebugCollector
  - TestEntityStats
  - TestListCollectors
  - TestListTerminals
  - TestDTBScan2   ## Takes too long on x86.

  # These are not tested/utility plugins.
  - TestBuildIndex
  - TestLoadAddressSpace
  - TestNull
  - TestLive

  # These are tested inline below.
  - TestAFF4Ls
  - TestAFF4Acquire
  - TestAFF4Export
  - TestAFF4Dump

  # These currently do not work on x86 XP images.
  - TestShowAllocation
  - TestFindReferenceAlloc

InlineTests:
   # Various Address translation modes.
   TestLargePagePTE:  "cc(844); vtop(0x7F6F06C2)"
   TestVadPTE:  "cc(844); vtop(0x77ed1000)"
   TestVadPTESubsection:  "cc(844); vtop(0x77c65000)"
   TestVadPTEPaged:  "cc(844); vtop(0x00082000)"
   TestPagedPTE:  "cc(844); vtop(0x00250000)"
   # Test search queries:
   TestSearch1: "search('SELECT * FROM pslist() WHERE (_EPROCESS.pid in [4, 216, 1668]) ORDER BY _EPROCESS.pid')"
   TestSearch2: "search('select details AS path from handles() where _EPROCESS.pid == 1968 and obj_type == \"File\"')"

   TestAFF4Imaging: |
     # Create an AFF4 output volume from physical address space.
     import re, os
     from rekall import constants

     # Normalize the version because that goes in the AFF4 image.
     constants.VERSION = "1.5"
     constants.CODENAME = "Furka"

     output = os.path.join(tempdir, "output.aff4")

     def normalize(data):
       """Normalize output to remove randomness."""
       data = str(data)

       data = data.replace(tempdir, "TEMPDIR")
       print re.sub("aff4:/+([^/\s]+)/?", lambda m: "aff4:/" + "X"*len(m.group(1)) + "/", data)

     print "AFF4Acquire:"
     normalize(session.plugins.aff4acquire(
         destination=output, compression="snappy"))

     # Test the AFF4Ls functionality.
     print "AFF4Ls short:"
     normalize(session.plugins.aff4ls(output))

     print "AFF4Ls long:"
     normalize(session.plugins.aff4ls(output, long=True))

     print "AFF4Dump:"
     normalize(session.plugins.aff4dump(output))

     print "AFF4Dump long:"
     normalize(session.plugins.aff4dump(output, long=True))

     output = os.path.join(tempdir, "output.dir/")

     print "AFF4Acquire:"
     normalize(session.plugins.aff4acquire(
         destination=output, compression="snappy"))

     # Test the AFF4Ls functionality.
     print "AFF4Ls short:"
     normalize(session.plugins.aff4ls(output))

     print "Directory Listing:"
     for x in sorted(os.listdir(output)):
        print x

TestArtifactsList:
  commandline: artifact_list --regex LinuxSSHD_WX

TestArtifactsCollector:
  commandline: artifact_collector WindowsProcessListing

TestWhichPlugin:
  struct: _EPROCESS

TestCollect:
  struct: _EPROCESS

TestExplain:
  query: select * from pslist() where _EPROCESS.pid == 4

TestSearch:
  query: select * from pslist() where _EPROCESS.pid == 4

TestBuildProfileLocally:
  pdb_name: ntkrnlpa
  guid: BD8F451F3E754ED8A34B50560CEB08E31

TestPFN:
  commandline: pfn 0x4a06

TestDT:
  commandline: dt _EPROCESS

TestDump:
  commandline: dump "nt!str:PoolTag" --length=100

TestVtoP:
  vaddr: 0x001dd000

TestGrep:
  keyword:  explorer.exe
  offset:  0xff3865d0

TestPas2Vas:
  offset: 0x4a065d0

TestBuildIndex:
  commandline: build_index -h

TestAnalyzeStruct:
  commandline: analyze_struct 0xff3865d0

TestInlineHooks:
  pids: 1724

TestIATHooks:
  --name_resolution_strategies:
     - Module
     - Symbol
     - Export


TestDwarfParser:
  commandline: "dwarfparser %(testdir)s/module.ko"

TestDisassemble:
  func: nt!MmGetPhysicalMemoryRanges
  length: 50

TestParsePDB:
  commandline: parse_pdb %(testdir)s/B5DDBBCD0BF24B2EA72E36AC4F1CBD002.pdb

TestPEDump:
  image_base: 0x810dbe68

TestPTE:
  pte: 0x3286b8

TestPtoV:
  commandline: ptov 0x115b8d8

TestMemoryTranslation:
  commandline: inspect_vaddr "nt"

TestWinSigScan:
  commandline: sigscan "310036003100340038003900350037*433a5c57494e444f"

TestWinYaraScan:
  commandline: yarascan "--string Bus Number %%d, Target ID %%d, LUN %%d"

TestSigScanPhysical:
  signature: "436f756c646e277420616c6c6f636174652076616c6964205453532064657363726970746f7220696e204e7450726f63657373537461727475702c20426c5365747570466f724e74206973206661696c696e67"

TestSigScanKernel:
  signature: "436f756c646e277420616c6c6f636174652076616c6964205453532064657363726970746f7220696e204e7450726f63657373537461727475702c20426c5365747570466f724e74206973206661696c696e67"

TestSigScanProcess:
  proc_regex: "explorer"
  signature: "534f4654574152455c4d6963726f736f66745c57696e646f7773204e545c43757272656e7456657273696f6e5c57696e6c6f676f6e*55534552454e562e646c6c"

TestYara:
  string: system32

TestWinRammap:
  start: 0x519c000

TestLookup:
  commandline: lookup nt!MmNumberOfPagingFiles int